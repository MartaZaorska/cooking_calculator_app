const WEIGHTS = {
    litr: { value: 1e3, unit: "ml" },
    cup: { value: 250, unit: "ml" },
    kg: { value: 1e3, unit: "gram" },
    "fl oz (fluid)": { value: 29.5735296, unit: "ml" },
    mg: { value: 0.001, unit: "gram" },
    "Ib (funt)": { value: 453.59237, unit: "gram" },
    "oz (uncja)": { value: 28.3495231, unit: "gram" }
  },
  MEASURE = [
    "gram",
    "ml",
    "litr/y",
    "kg",
    "fl oz (fluid)",
    "mg",
    "Ib (funt)",
    "oz (uncja)",
    "cup",
    "łyżka/i",
    "łyżeczka/i",
    "sztuk",
    "stick",
    "puszka/i",
    "paczka/i",
    "szczypta",
    "plaster"
  ],
  PRODUCTS = {
    mąka: { cup: 130, łyżka: 8 },
    masło: { cup: 227, łyżka: 14, stick: 113 },
    cukier: { cup: 200, łyżka: 13 },
    "brązowy cukier": { cup: 180, łyżka: 12 },
    "płatki owsiane": { cup: 90, łyżka: 6 },
    "cukier puder": { cup: 140, łyżka: 9 },
    "mąka ziemiaczana": { cup: 120 },
    ryż: { cup: 190 },
    kuskus: { cup: 180 },
    "bułka tarta": { cup: 60 },
    miód: { cup: 340 }
  },
  prepareNumber = e => e.replace(",", "."),
  getCelsius = e => (5 / 9) * (e - 32),
  getFahrenheit = e => 1.8 * e + 32,
  checkNumber = e => /^\d*\.?\d*$/.test(e),
  getValueForBasicUnit = (e, t, n) => {
    const a = { amount: t, unit: n };
    return (
      "cup" !== n && WEIGHTS[n]
        ? ((a.amount = t * WEIGHTS[n].value), (a.unit = WEIGHTS[n].unit))
        : PRODUCTS[e] &&
          PRODUCTS[e][n] &&
          ((a.amount = t * PRODUCTS[e][n]), (a.unit = "gram")),
      a
    );
  },
  getUnitValue = e => {
    const t = e.indexOf("/");
    return t < 0 ? e : e.slice(0, t);
  },
  getFloatNumber = e => {
    const t = e.toFixed(3);
    return t.endsWith("000")
      ? t.slice(0, -4)
      : t.endsWith("00")
      ? t.slice(0, -2)
      : t.endsWith("0")
      ? t.slice(0, -1)
      : t;
  };
class Store {
  static getData() {
    const e = localStorage.getItem("cooking_calculator_app");
    return null === e ? [] : JSON.parse(e);
  }
  static setData(e) {
    localStorage.setItem("cooking_calculator_app", JSON.stringify(e));
  }
  static clearData() {
    localStorage.clear();
  }
}
class UI {
  static displayStartData() {
    UI.displayMeasure(), UI.displayProducts(), UI.displayUnitSelect();
  }
  static displayError(e) {
    const t = document.querySelector(".error");
    (t.innerHTML = `\n      <p class="error__text">${e}</p>\n    `),
      setTimeout(() => (t.innerHTML = ""), 3e3);
  }
  static displayMeasure() {
    const e = document.querySelector(".measure");
    (e.innerHTML = ""),
      Object.entries(WEIGHTS).forEach(t => {
        e.innerHTML += `\n        <div class="measure__item">\n          <span class="name">${
          t[0]
        }</span> <span class="value">${getFloatNumber(t[1].value)} ${
          t[1].unit
        }</span>\n        </div>\n      `;
      });
  }
  static displayProducts() {
    const e = document.querySelector(".products");
    (e.innerHTML = ""),
      Object.entries(PRODUCTS).forEach(t => {
        Object.entries(t[1]).forEach(n => {
          e.innerHTML += `\n          <div class="products__item">\n            <span class="name">1 ${n[0]} ${t[0]}</span> <span class="value">${n[1]} gram</span>\n          </div>\n        `;
        });
      });
  }
  static displayUnitSelect() {
    const e = document.querySelector(".unit__select");
    (e.innerHTML = ""),
      MEASURE.forEach(t => {
        e.innerHTML += `\n        <option value="${t}">${t}</option>\n      `;
      });
  }
  static getIngredientElement(e, t, n, a) {
    const r = { ...e[t] },
      i = getUnitValue(r.unit);
    if (n) {
      const { amount: e, unit: t } = getValueForBasicUnit(r.name, r.amount, i);
      (r.amount = e), (r.unit = t);
    }
    r.amount *= a;
    const s = document.createElement("section");
    return (
      s.classList.add("ingredient_item"),
      s.addEventListener("click", n => removeIngredientHandler(n, e, t)),
      (s.innerHTML = `\n      <p class="ingredient_item__text">${getFloatNumber(
        r.amount
      )} ${r.unit} ${
        r.name
      }</p>\n      <button class="ingredient_item__button">\n        <i class="far fa-times-circle"></i>\n      </button>\n    `),
      s
    );
  }
  static displayIngredients(e) {
    const t = document.getElementById("basic_unit"),
      n = document.querySelector(".ingredients__content"),
      a = document.getElementById("portion_input");
    n.innerHTML = "";
    const r = "off" !== t.getAttribute("data-value"),
      i = prepareNumber(a.value),
      s = "" !== i && checkNumber(i) ? parseFloat(i) : 1;
    e.forEach((t, a) => {
      n.appendChild(UI.getIngredientElement(e, a, r, s));
    });
  }
}
const temperatureHandler = e => {
    const t = document.getElementById("input_temperature"),
      n = document.querySelector("#result_temperature"),
      a = document.querySelector(".first_scale"),
      r = document.querySelector(".result_scale"),
      i = a.getAttribute("data-scale"),
      s = r.getAttribute("data-scale");
    if (
      (e &&
        (r.setAttribute("data-scale", i),
        a.setAttribute("data-scale", s),
        (r.innerHTML = `&deg;${i}`),
        (a.innerHTML = `&deg;${s}`)),
      "" === t.value)
    )
      return void (n.innerText = "0");
    const c = prepareNumber(t.value);
    if (checkNumber(c)) {
      const e = a.getAttribute("data-scale"),
        t = parseFloat(c);
      n.innerText =
        "F" === e ? Math.floor(getCelsius(t)) : Math.floor(getFahrenheit(t));
    }
  },
  changeUnitHandler = e => {
    const t = Store.getData(),
      n = document.getElementById("basic_unit");
    n.classList.toggle("ingredients__button_unit--active");
    const a = "off" === n.getAttribute("data-value") ? "on" : "off";
    n.setAttribute("data-value", a), UI.displayIngredients(t);
  },
  portionHandler = e => {
    const t = Store.getData();
    if (0 === t.length) return;
    const n = prepareNumber(e.target.value);
    checkNumber(n) || "" === n
      ? UI.displayIngredients(t)
      : UI.displayError("Wprowadź prawidłową liczbę");
  },
  addIngredientHandler = e => {
    e.preventDefault();
    const t = Store.getData(),
      { name: n, unit: a, amount: r } = e.target.elements;
    if ("" === n.value || "" === a.value || "" === r.value)
      return void UI.displayError(
        "Wszystkie pola formularza muszą zostać wypełnione"
      );
    const i = prepareNumber(r.value);
    if (!checkNumber(i))
      return void UI.displayError("Wprowadź poprawną ilość składnika");
    const s = { name: n.value, amount: parseFloat(i), unit: a.value };
    t.push(s), Store.setData(t), UI.displayIngredients(t), e.target.reset();
  },
  removeIngredientHandler = (e, t, n) => {
    e.target.classList.contains("ingredient_item__button") &&
      (t.splice(n, 1), Store.setData(t), UI.displayIngredients(t));
  },
  clearIngredientsHandler = () => {
    Store.clearData(), UI.displayIngredients([]);
  };
document.addEventListener("DOMContentLoaded", () => {
  "serviceWorker" in navigator &&
    window.addEventListener("load", () => {
      navigator.serviceWorker
        .register("./serviceWorker.js")
        .then(e => console.log("Service Worker: Registered"))
        .catch(e => console.log("Service Worker: Error"));
    });
  const e = document.querySelector("#input_temperature"),
    t = document.querySelector(".temperature__button"),
    n = document.querySelector(".add_ingredient__form"),
    a = document.getElementById("portion_input"),
    r = document.getElementById("basic_unit"),
    i = document.getElementById("clear_ingredients");
  e.addEventListener("input", () => temperatureHandler(!1)),
    t.addEventListener("click", () => temperatureHandler(!0)),
    r.addEventListener("click", changeUnitHandler),
    a.addEventListener("input", portionHandler),
    n.addEventListener("submit", addIngredientHandler),
    i.addEventListener("click", clearIngredientsHandler),
    (() => {
      const e = Store.getData() || [];
      UI.displayStartData(), UI.displayIngredients(e);
    })();
});
